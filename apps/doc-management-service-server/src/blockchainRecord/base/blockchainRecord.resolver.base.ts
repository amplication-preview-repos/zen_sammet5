/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { BlockchainRecord } from "./BlockchainRecord";
import { BlockchainRecordCountArgs } from "./BlockchainRecordCountArgs";
import { BlockchainRecordFindManyArgs } from "./BlockchainRecordFindManyArgs";
import { BlockchainRecordFindUniqueArgs } from "./BlockchainRecordFindUniqueArgs";
import { CreateBlockchainRecordArgs } from "./CreateBlockchainRecordArgs";
import { UpdateBlockchainRecordArgs } from "./UpdateBlockchainRecordArgs";
import { DeleteBlockchainRecordArgs } from "./DeleteBlockchainRecordArgs";
import { Document } from "../../document/base/Document";
import { BlockchainRecordService } from "../blockchainRecord.service";
@graphql.Resolver(() => BlockchainRecord)
export class BlockchainRecordResolverBase {
  constructor(protected readonly service: BlockchainRecordService) {}

  async _blockchainRecordsMeta(
    @graphql.Args() args: BlockchainRecordCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [BlockchainRecord])
  async blockchainRecords(
    @graphql.Args() args: BlockchainRecordFindManyArgs
  ): Promise<BlockchainRecord[]> {
    return this.service.blockchainRecords(args);
  }

  @graphql.Query(() => BlockchainRecord, { nullable: true })
  async blockchainRecord(
    @graphql.Args() args: BlockchainRecordFindUniqueArgs
  ): Promise<BlockchainRecord | null> {
    const result = await this.service.blockchainRecord(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => BlockchainRecord)
  async createBlockchainRecord(
    @graphql.Args() args: CreateBlockchainRecordArgs
  ): Promise<BlockchainRecord> {
    return await this.service.createBlockchainRecord({
      ...args,
      data: {
        ...args.data,

        document: args.data.document
          ? {
              connect: args.data.document,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => BlockchainRecord)
  async updateBlockchainRecord(
    @graphql.Args() args: UpdateBlockchainRecordArgs
  ): Promise<BlockchainRecord | null> {
    try {
      return await this.service.updateBlockchainRecord({
        ...args,
        data: {
          ...args.data,

          document: args.data.document
            ? {
                connect: args.data.document,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => BlockchainRecord)
  async deleteBlockchainRecord(
    @graphql.Args() args: DeleteBlockchainRecordArgs
  ): Promise<BlockchainRecord | null> {
    try {
      return await this.service.deleteBlockchainRecord(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Document, {
    nullable: true,
    name: "document",
  })
  async getDocument(
    @graphql.Parent() parent: BlockchainRecord
  ): Promise<Document | null> {
    const result = await this.service.getDocument(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
