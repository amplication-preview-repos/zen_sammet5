/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  BlockchainRecord as PrismaBlockchainRecord,
  Document as PrismaDocument,
} from "@prisma/client";

export class BlockchainRecordServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.BlockchainRecordCountArgs, "select">
  ): Promise<number> {
    return this.prisma.blockchainRecord.count(args);
  }

  async blockchainRecords(
    args: Prisma.BlockchainRecordFindManyArgs
  ): Promise<PrismaBlockchainRecord[]> {
    return this.prisma.blockchainRecord.findMany(args);
  }
  async blockchainRecord(
    args: Prisma.BlockchainRecordFindUniqueArgs
  ): Promise<PrismaBlockchainRecord | null> {
    return this.prisma.blockchainRecord.findUnique(args);
  }
  async createBlockchainRecord(
    args: Prisma.BlockchainRecordCreateArgs
  ): Promise<PrismaBlockchainRecord> {
    return this.prisma.blockchainRecord.create(args);
  }
  async updateBlockchainRecord(
    args: Prisma.BlockchainRecordUpdateArgs
  ): Promise<PrismaBlockchainRecord> {
    return this.prisma.blockchainRecord.update(args);
  }
  async deleteBlockchainRecord(
    args: Prisma.BlockchainRecordDeleteArgs
  ): Promise<PrismaBlockchainRecord> {
    return this.prisma.blockchainRecord.delete(args);
  }

  async getDocument(parentId: string): Promise<PrismaDocument | null> {
    return this.prisma.blockchainRecord
      .findUnique({
        where: { id: parentId },
      })
      .document();
  }
}
