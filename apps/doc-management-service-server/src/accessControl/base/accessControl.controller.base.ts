/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AccessControlService } from "../accessControl.service";
import { AccessControlCreateInput } from "./AccessControlCreateInput";
import { AccessControl } from "./AccessControl";
import { AccessControlFindManyArgs } from "./AccessControlFindManyArgs";
import { AccessControlWhereUniqueInput } from "./AccessControlWhereUniqueInput";
import { AccessControlUpdateInput } from "./AccessControlUpdateInput";

export class AccessControlControllerBase {
  constructor(protected readonly service: AccessControlService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AccessControl })
  async createAccessControl(
    @common.Body() data: AccessControlCreateInput
  ): Promise<AccessControl> {
    return await this.service.createAccessControl({
      data: {
        ...data,

        document: data.document
          ? {
              connect: data.document,
            }
          : undefined,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        createdAt: true,

        document: {
          select: {
            id: true,
          },
        },

        id: true,
        permissionLevel: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AccessControl] })
  @ApiNestedQuery(AccessControlFindManyArgs)
  async accessControls(
    @common.Req() request: Request
  ): Promise<AccessControl[]> {
    const args = plainToClass(AccessControlFindManyArgs, request.query);
    return this.service.accessControls({
      ...args,
      select: {
        createdAt: true,

        document: {
          select: {
            id: true,
          },
        },

        id: true,
        permissionLevel: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AccessControl })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async accessControl(
    @common.Param() params: AccessControlWhereUniqueInput
  ): Promise<AccessControl | null> {
    const result = await this.service.accessControl({
      where: params,
      select: {
        createdAt: true,

        document: {
          select: {
            id: true,
          },
        },

        id: true,
        permissionLevel: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AccessControl })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAccessControl(
    @common.Param() params: AccessControlWhereUniqueInput,
    @common.Body() data: AccessControlUpdateInput
  ): Promise<AccessControl | null> {
    try {
      return await this.service.updateAccessControl({
        where: params,
        data: {
          ...data,

          document: data.document
            ? {
                connect: data.document,
              }
            : undefined,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          createdAt: true,

          document: {
            select: {
              id: true,
            },
          },

          id: true,
          permissionLevel: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AccessControl })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAccessControl(
    @common.Param() params: AccessControlWhereUniqueInput
  ): Promise<AccessControl | null> {
    try {
      return await this.service.deleteAccessControl({
        where: params,
        select: {
          createdAt: true,

          document: {
            select: {
              id: true,
            },
          },

          id: true,
          permissionLevel: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
