/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Upload as PrismaUpload,
  Document as PrismaDocument,
} from "@prisma/client";

export class UploadServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.UploadCountArgs, "select">): Promise<number> {
    return this.prisma.upload.count(args);
  }

  async uploads(args: Prisma.UploadFindManyArgs): Promise<PrismaUpload[]> {
    return this.prisma.upload.findMany(args);
  }
  async upload(
    args: Prisma.UploadFindUniqueArgs
  ): Promise<PrismaUpload | null> {
    return this.prisma.upload.findUnique(args);
  }
  async createUpload(args: Prisma.UploadCreateArgs): Promise<PrismaUpload> {
    return this.prisma.upload.create(args);
  }
  async updateUpload(args: Prisma.UploadUpdateArgs): Promise<PrismaUpload> {
    return this.prisma.upload.update(args);
  }
  async deleteUpload(args: Prisma.UploadDeleteArgs): Promise<PrismaUpload> {
    return this.prisma.upload.delete(args);
  }

  async getDocument(parentId: string): Promise<PrismaDocument | null> {
    return this.prisma.upload
      .findUnique({
        where: { id: parentId },
      })
      .document();
  }
}
