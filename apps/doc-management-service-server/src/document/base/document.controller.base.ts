/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DocumentService } from "../document.service";
import { DocumentCreateInput } from "./DocumentCreateInput";
import { Document } from "./Document";
import { DocumentFindManyArgs } from "./DocumentFindManyArgs";
import { DocumentWhereUniqueInput } from "./DocumentWhereUniqueInput";
import { DocumentUpdateInput } from "./DocumentUpdateInput";
import { AccessControlFindManyArgs } from "../../accessControl/base/AccessControlFindManyArgs";
import { AccessControl } from "../../accessControl/base/AccessControl";
import { AccessControlWhereUniqueInput } from "../../accessControl/base/AccessControlWhereUniqueInput";
import { BlockchainRecordFindManyArgs } from "../../blockchainRecord/base/BlockchainRecordFindManyArgs";
import { BlockchainRecord } from "../../blockchainRecord/base/BlockchainRecord";
import { BlockchainRecordWhereUniqueInput } from "../../blockchainRecord/base/BlockchainRecordWhereUniqueInput";
import { UploadFindManyArgs } from "../../upload/base/UploadFindManyArgs";
import { Upload } from "../../upload/base/Upload";
import { UploadWhereUniqueInput } from "../../upload/base/UploadWhereUniqueInput";

export class DocumentControllerBase {
  constructor(protected readonly service: DocumentService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Document })
  async createDocument(
    @common.Body() data: DocumentCreateInput
  ): Promise<Document> {
    return await this.service.createDocument({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        content: true,
        createdAt: true,
        hash: true,
        id: true,
        title: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Document] })
  @ApiNestedQuery(DocumentFindManyArgs)
  async documents(@common.Req() request: Request): Promise<Document[]> {
    const args = plainToClass(DocumentFindManyArgs, request.query);
    return this.service.documents({
      ...args,
      select: {
        content: true,
        createdAt: true,
        hash: true,
        id: true,
        title: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Document })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async document(
    @common.Param() params: DocumentWhereUniqueInput
  ): Promise<Document | null> {
    const result = await this.service.document({
      where: params,
      select: {
        content: true,
        createdAt: true,
        hash: true,
        id: true,
        title: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Document })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDocument(
    @common.Param() params: DocumentWhereUniqueInput,
    @common.Body() data: DocumentUpdateInput
  ): Promise<Document | null> {
    try {
      return await this.service.updateDocument({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          content: true,
          createdAt: true,
          hash: true,
          id: true,
          title: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Document })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDocument(
    @common.Param() params: DocumentWhereUniqueInput
  ): Promise<Document | null> {
    try {
      return await this.service.deleteDocument({
        where: params,
        select: {
          content: true,
          createdAt: true,
          hash: true,
          id: true,
          title: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/accessControls")
  @ApiNestedQuery(AccessControlFindManyArgs)
  async findAccessControls(
    @common.Req() request: Request,
    @common.Param() params: DocumentWhereUniqueInput
  ): Promise<AccessControl[]> {
    const query = plainToClass(AccessControlFindManyArgs, request.query);
    const results = await this.service.findAccessControls(params.id, {
      ...query,
      select: {
        createdAt: true,

        document: {
          select: {
            id: true,
          },
        },

        id: true,
        permissionLevel: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/accessControls")
  async connectAccessControls(
    @common.Param() params: DocumentWhereUniqueInput,
    @common.Body() body: AccessControlWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      accessControls: {
        connect: body,
      },
    };
    await this.service.updateDocument({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/accessControls")
  async updateAccessControls(
    @common.Param() params: DocumentWhereUniqueInput,
    @common.Body() body: AccessControlWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      accessControls: {
        set: body,
      },
    };
    await this.service.updateDocument({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/accessControls")
  async disconnectAccessControls(
    @common.Param() params: DocumentWhereUniqueInput,
    @common.Body() body: AccessControlWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      accessControls: {
        disconnect: body,
      },
    };
    await this.service.updateDocument({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/blockchainRecords")
  @ApiNestedQuery(BlockchainRecordFindManyArgs)
  async findBlockchainRecords(
    @common.Req() request: Request,
    @common.Param() params: DocumentWhereUniqueInput
  ): Promise<BlockchainRecord[]> {
    const query = plainToClass(BlockchainRecordFindManyArgs, request.query);
    const results = await this.service.findBlockchainRecords(params.id, {
      ...query,
      select: {
        blockchainHash: true,
        createdAt: true,

        document: {
          select: {
            id: true,
          },
        },

        id: true,
        timestamp: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/blockchainRecords")
  async connectBlockchainRecords(
    @common.Param() params: DocumentWhereUniqueInput,
    @common.Body() body: BlockchainRecordWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      blockchainRecords: {
        connect: body,
      },
    };
    await this.service.updateDocument({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/blockchainRecords")
  async updateBlockchainRecords(
    @common.Param() params: DocumentWhereUniqueInput,
    @common.Body() body: BlockchainRecordWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      blockchainRecords: {
        set: body,
      },
    };
    await this.service.updateDocument({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/blockchainRecords")
  async disconnectBlockchainRecords(
    @common.Param() params: DocumentWhereUniqueInput,
    @common.Body() body: BlockchainRecordWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      blockchainRecords: {
        disconnect: body,
      },
    };
    await this.service.updateDocument({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/uploads")
  @ApiNestedQuery(UploadFindManyArgs)
  async findUploads(
    @common.Req() request: Request,
    @common.Param() params: DocumentWhereUniqueInput
  ): Promise<Upload[]> {
    const query = plainToClass(UploadFindManyArgs, request.query);
    const results = await this.service.findUploads(params.id, {
      ...query,
      select: {
        createdAt: true,

        document: {
          select: {
            id: true,
          },
        },

        fileName: true,
        filePath: true,
        fileSize: true,
        fileType: true,
        id: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/uploads")
  async connectUploads(
    @common.Param() params: DocumentWhereUniqueInput,
    @common.Body() body: UploadWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      uploads: {
        connect: body,
      },
    };
    await this.service.updateDocument({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/uploads")
  async updateUploads(
    @common.Param() params: DocumentWhereUniqueInput,
    @common.Body() body: UploadWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      uploads: {
        set: body,
      },
    };
    await this.service.updateDocument({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/uploads")
  async disconnectUploads(
    @common.Param() params: DocumentWhereUniqueInput,
    @common.Body() body: UploadWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      uploads: {
        disconnect: body,
      },
    };
    await this.service.updateDocument({
      where: params,
      data,
      select: { id: true },
    });
  }
}
