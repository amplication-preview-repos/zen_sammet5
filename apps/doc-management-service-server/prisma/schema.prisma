datasource db {
  provider = "mongodb"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model BlockchainRecord {
  blockchainHash String?
  createdAt      DateTime  @default(now())
  document       Document? @relation(fields: [documentId], references: [id])
  documentId     String?   @db.ObjectId
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  timestamp      DateTime?
  updatedAt      DateTime  @updatedAt
}

model Document {
  accessControls    AccessControl[]
  blockchainRecords BlockchainRecord[]
  content           String?
  createdAt         DateTime           @default(now())
  hash              String?
  id                String             @id @default(auto()) @map("_id") @db.ObjectId
  title             String?
  updatedAt         DateTime           @updatedAt
  uploads           Upload[]
  user              User?              @relation(fields: [userId], references: [id])
  userId            String?            @db.ObjectId
}

model Upload {
  createdAt  DateTime  @default(now())
  document   Document? @relation(fields: [documentId], references: [id])
  documentId String?   @db.ObjectId
  fileName   String?
  filePath   String?
  fileSize   Int?
  fileType   String?
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  updatedAt  DateTime  @updatedAt
}

model User {
  accessControls AccessControl[]
  createdAt      DateTime        @default(now())
  documents      Document[]
  email          String?         @unique
  firstName      String?
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  lastName       String?
  password       String
  roles          Json
  updatedAt      DateTime        @updatedAt
  username       String          @unique
}

model AccessControl {
  createdAt       DateTime                          @default(now())
  document        Document?                         @relation(fields: [documentId], references: [id])
  documentId      String?                           @db.ObjectId
  id              String                            @id @default(auto()) @map("_id") @db.ObjectId
  permissionLevel EnumAccessControlPermissionLevel?
  updatedAt       DateTime                          @updatedAt
  user            User?                             @relation(fields: [userId], references: [id])
  userId          String?                           @db.ObjectId
}

model Folder {
  createdAt   DateTime @default(now())
  description String?
  folder      Folder?  @relation(name: "FolderOnFolders", fields: [folderId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  folderId    String?  @db.ObjectId
  folders     Folder[] @relation(name: "FolderOnFolders")
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String?
  updatedAt   DateTime @updatedAt
}

model AuditLog {
  createdAt DateTime @default(now())
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  updatedAt DateTime @updatedAt
}

model Tag {
  createdAt DateTime @default(now())
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  updatedAt DateTime @updatedAt
}

enum EnumAccessControlPermissionLevel {
  Option1
}
